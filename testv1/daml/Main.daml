module Main where

import Daml.Script

import DA.Foldable (forA_)
import DA.Numeric (cast)
import DA.Action (when)

template Point
  with
    owner  : Party
    x      : Numeric 10
    y      : Numeric 10
  where
    signatory owner

template NamedPoint
  with
    owner : Party
    x     : Numeric 10
    y     : Numeric 10
    name  : Text
  where
    signatory owner

ensureParty : Text -> Script Party
ensureParty partyName = do
  knownParties <- listKnownParties

  case find (\pd -> pd.displayName == Some partyName) knownParties of
    Some p -> pure p.party
    None -> do
      alice <- allocatePartyWithHint partyName (PartyIdHint partyName)
      aliceId <- validateUserId partyName
      createUser (User aliceId (Some alice)) [CanActAs alice]
      pure alice

progressIndicator : Int -> Script ()
progressIndicator x = 
  when (x % 10 == 0) $ debugRaw $ "[" <> show x <> "]"

test : Script ()
test = do
  alice <- ensureParty "alice"
  
  forA_ [0..1000] (\ii -> do

    progressIndicator ii

    submit alice do
      createCmd Point with
        owner = alice
        x = 3.0
        y = 4.0

    submit alice do
      createCmd Point with
        owner = alice
        x = 5.0
        y = 12.0

    submit alice do
      createCmd NamedPoint with
        owner = alice
        x = 0.0
        y = 0.0
        name = "Origin")        

  pure ()
